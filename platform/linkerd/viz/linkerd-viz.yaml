---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    fleet: linkerd
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRZmtqb0VQT2xuTXNJMVpia0VLWUJmakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRJeE5qRXpOVEF3TWxvWApEVEl6TVRJeE5qRXpOVEF3TWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT1R2d1JWVndTVjlpZnBEVHNLcjVmQkEKK3FPc2w1Sk5XbTlweDdaK25CbXBvaFYzdmRuTWJVSW5vS1Bzc01KSlAyR2NOcmNCWnJ4aHlGQzZGdmJGK3lCZwowNmFaQzJYUWlNSFg5ckJnSkFYMXNpQ1pkTENDcnRZZ1hJN1BQZ2ZiNUZxVUw3SkREb0JIRzdVN01xUmt2aHI0CldEaUtBWkF3TlhBTFJ3TzRtR2tmNUx3M0xlejlPUHA2ZW1VQ0FLc2hrR2dLbDFEOG1aWDRKZjRLdXdNTUx6VGsKT2g3eTFWWTgvanN0c2VRa0Yxc3hOYTJnYmdKWGdKNHZTZzNlOUlZRmUzUXgyc1hqdlN0ZWZuZER1am1EaUx6MApxVjlJdmhmM2FYZDJwOFY0UHA4SHE4Yll6VEdEejRGSUNFVW1DWllvdUJ3TlFWSjcxSzdFaHAvYVRNVTFzZk1DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFESWl2Z09nMVFPKzY0OWd4MGx1SUxyWGZ0ZWhNUnlFCjNxcVVZeUN6YXBRL3JSbnF1TVJzbGIzMDQzck5vZHp3RzdML2VpWGloZTZHNHJtTWQ4cll0QjZFZ2Z2eWIyNHAKUEhqWElTU1VUeVNNM0hzak5KSXdHL2R3OTNscjIrN0M3cERkSndBZ09Oc0Q0c1l4S0tiN09SdXo3NERTakREMwoxTUs2dzF5V1IxM25MVkpaTlNoVG9xUG5XRTkxR0pkcVFpUlhvMktvWlQ4RnFOeHpWR21kT09PMXY0eWdQbHc2Ci9mTUo1TG42dktSS2JwaVd2QVAzTHJZeVVNQW4zK3dRWHgwOCswRTVNLy91TDEyRGdPNU55NnNDK2NFU2ZDQmIKRnhHdkwzZmZkTHh5TVVYV3VDQWp0UE9BY3FnblRxb25zN0ZpTDdjd1N0bVF4ZVFiYXE2Wkd1OD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBNU8vQkZWWEJKWDJKK2tOT3dxdmw4RUQ2bzZ5WGtrMWFiMm5IdG42Y0dhbWlGWGU5CjJjeHRRaWVnbyt5d3dray9ZWncydHdGbXZHSElVTG9XOXNYN0lHRFRwcGtMWmRDSXdkZjJzR0FrQmZXeUlKbDAKc0lLdTFpQmNqczgrQjl2a1dwUXZza01PZ0VjYnRUc3lwR1MrR3ZoWU9Jb0JrREExY0F0SEE3aVlhUi9rdkRjdAo3UDA0K25wNlpRSUFxeUdRYUFxWFVQeVpsZmdsL2dxN0F3d3ZOT1E2SHZMVlZqeitPeTJ4NUNRWFd6RTFyYUJ1CkFsZUFuaTlLRGQ3MGhnVjdkREhheGVPOUsxNStkME82T1lPSXZQU3BYMGkrRi9kcGQzYW54WGcrbndlcnh0ak4KTVlQUGdVZ0lSU1lKbGlpNEhBMUJVbnZVcnNTR245cE14VFd4OHdJREFRQUJBb0lCQVFDSkFVSVh0bjRrSllEUgpHRDZtR2FFOXFtVlVWaEZQS0tPYVVUK0hZeldmMWZoOXlHOEJUR21HVVppOUFRUzNBSWJCcjI2L0RrT2hNUk5qCjNEbXA3TWxna3hHV2ZiaG9jZWVsdWN5VHVMVldLN2N4OHlQMkRmNzdmZHBtVEhmZTFDVlFYNlk3bEEyMWp0aHkKR0w4eHltaEtVNXpZR1I3ZVh6dGJsaVFsZ2U4VDJUU05FaktTc0lTU2s0dk5LUXlqWm4rRlROUThhNUxjZWRJdApFdG41dHh2VUV2cTJYMmIzcTRuajRSbUc4WThaSnBXUXYyb2ljUm5FSjd4T0dvdHF3S0trRTZWN1lVRFVPOEUrCm8wdE93Y3RyOE1BYUk0Sy9LWE15cTJqOCt2YXpJaHBaNU4ySmVUdnlYOFBrVlRmemMyZDVudGhXUjcrekk0M0oKWGJwRHYveUJBb0dCQU83ZHgzSWt0bXhBWlRUV0FObU04NDZMZUwveGdvUGFjU1lQeEttRlVkaitiMU9tZkdZMQowNjZNWDkxNnlpQmV6RW1VTW1DUEtWOURTWG9VYzZnMzRiT0NYaUpaOEhic1d0QTJaNllPakpmZmJmOE9FWUpCCnZsZTh4ZkhHQXpFS202WTg4d1pNaUFIQ1Q3dmdLdnIvWXYvUlhOcDBTRjM3R3IxQkhmZUFkclNEQW9HQkFQVmIKbzAwbTlFWUpLcmZJRENJTXZwU2ZVTDNBY290R2h5T2FZTnpNbUxLNUFwT0tCVENuVFFaZlNEOEtlaERROXJsWQorUjMzQXByaWhscTdlRHovTDNnRkcxUGJEWW52K20ycmZHQko1WkJvS2hVQm96M052SFlLTFBDOXFaemhEQWpvCklXbjA4YjRPbEJwWHRjTHlTZjdwQnBuMHlPenVZelVrZlVndG4vSFJBb0dBTU9taEtiSnkySC9uT1lhSTdnTjYKN0RtTEpHTGtBdlA4TDNzVEhsTjZpeUN1MDBaSU92WFN2dTlud2dhZTFUb1VRd3pocy93YzBMRUtuc0VKWGV6egpmcnEzWS9sZTBEdGQ3VHoyeEg0K00rdEFydlhHaUJIR1ZGa0hmNWE0bUpZL2dTOEI1TXhQSFcwWXZyUU1tUkVxCnlJK3FuK0VuNEhiRzV2SXFuTC9sanRrQ2dZQnppYVI3ZDBWK0dXRDVUQVdTbnllN2VzNGRuSnNUeExGc2JZMEIKVElMM1hqRzlZamdSY2liT1FsNFYrWXdEa1RNdGtwMDBwQldnODl6S3F3N3l3a1FMSTNSNzUySVh1MTdVOS9USQpydU9nUGJ6YlNYc2labGhCeVliaUVwM2xWd0JBelhhMm0zYWV4ZVN1QnZGN2pIYVZ5QXVvd2VFLzJQMzBqMnRECmF1Q3ZrUUtCZ1FDSnlvMGFuSFVCOTYvNm1iUk5XdkhGUkRYaWNLTjFkcktpV0lvVVQwODI3cUVPM3hVZUVTVGMKc1VFQ2N5R0dkVUR4MCtDbytxOGQ0M3JjWjJEWlYxT0tDaG91dlRrc2o3UGJYYVRtMEc3Q0NYZ1NMRjRHQzdtMApuajV6ZDVvV2NTN05Hb1Bub2FwNXVJRGI3ZGgzSllIbGh3L0dQOWZlTmEra3ZpdG1obDltSlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRZmtqb0VQT2xuTXNJMVpia0VLWUJmakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl5TVRJeE5qRXpOVEF3TWxvWApEVEl6TVRJeE5qRXpOVEF3TWxvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBT1R2d1JWVndTVjlpZnBEVHNLcjVmQkEKK3FPc2w1Sk5XbTlweDdaK25CbXBvaFYzdmRuTWJVSW5vS1Bzc01KSlAyR2NOcmNCWnJ4aHlGQzZGdmJGK3lCZwowNmFaQzJYUWlNSFg5ckJnSkFYMXNpQ1pkTENDcnRZZ1hJN1BQZ2ZiNUZxVUw3SkREb0JIRzdVN01xUmt2aHI0CldEaUtBWkF3TlhBTFJ3TzRtR2tmNUx3M0xlejlPUHA2ZW1VQ0FLc2hrR2dLbDFEOG1aWDRKZjRLdXdNTUx6VGsKT2g3eTFWWTgvanN0c2VRa0Yxc3hOYTJnYmdKWGdKNHZTZzNlOUlZRmUzUXgyc1hqdlN0ZWZuZER1am1EaUx6MApxVjlJdmhmM2FYZDJwOFY0UHA4SHE4Yll6VEdEejRGSUNFVW1DWllvdUJ3TlFWSjcxSzdFaHAvYVRNVTFzZk1DCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFESWl2Z09nMVFPKzY0OWd4MGx1SUxyWGZ0ZWhNUnlFCjNxcVVZeUN6YXBRL3JSbnF1TVJzbGIzMDQzck5vZHp3RzdML2VpWGloZTZHNHJtTWQ4cll0QjZFZ2Z2eWIyNHAKUEhqWElTU1VUeVNNM0hzak5KSXdHL2R3OTNscjIrN0M3cERkSndBZ09Oc0Q0c1l4S0tiN09SdXo3NERTakREMwoxTUs2dzF5V1IxM25MVkpaTlNoVG9xUG5XRTkxR0pkcVFpUlhvMktvWlQ4RnFOeHpWR21kT09PMXY0eWdQbHc2Ci9mTUo1TG42dktSS2JwaVd2QVAzTHJZeVVNQW4zK3dRWHgwOCswRTVNLy91TDEyRGdPNU55NnNDK2NFU2ZDQmIKRnhHdkwzZmZkTHh5TVVYV3VDQWp0UE9BY3FnblRxb25zN0ZpTDdjd1N0bVF4ZVFiYXE2Wkd1OD0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: proxy-admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 0a3fd83ffcd3956f6ad2382d7414c8192bc8364847302fe31da19bf1ed589584
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUs0SXRjeFQzNVFBSnQ5KzEvV2U2MFl3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFeQpNVFl4TXpVd01ESmFGdzB5TXpFeU1UWXhNelV3TURKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDbjB2Y0pTUUx1emxZcHhZdUNoZzBtTFI0NWU2d0V5eGZCaS9mYlVVUTBtOCthaXh3Tk5pcnlKQWZVM1BSdQpQaysxM0RCaFg3bU4rNnNnZ1k4allkSGJ2UmZ2bkJMcCtsUnplVGlxc1drMnlObWxnMkxBRjJzNmF6cFYydEIyCmlCV3JtUXpKTnBHM3lhMzdQcFc5UVFxZ1BqN0dYUmlwM2NCWHh4ZnNXQnFWbU1xYUw1dlRTQkx1OWRHd3l0WnkKbUgydVI2ZUo0QXFDQzJaRDVuRmlDdVNSYmgyRjQ2R09ucUo0bmZWUnVyRU1XYmd6bzZ1ditiSzY4dWZmNWp6VQpZZ0NFRHU4dnZRZldiYVpsSnhhcEZZK0Z3bjJVdDlKNm5HNUVtdDJnRWtROEpteDJrUjNwL1hmZ3R4Q2FGYTF5CkoyRGZnQnNaWUF6VUp2Y09DQ3h2N04zOUFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUIzV0dBSkR2elZxY01qbzBYNUlFcHdVWW41L1laeENJMDRoOWVwNzFpUUhSZGhWZVJQTGVQMURnN2YKL3JOYzZ3Z1JyZnR4Tm4yajQ5TEtBYzZVVjRERXNyaVA1dDFRVGttN0o5NEl6NlB2V1NWZEZUOS9aWDNaR3hQQwpqOG5WTFB0Rm4wU3dwUTdNOXhsbStIVlZLWUpMb1U2RjZxOXF4dmdUeGk0V04zem5nRWhlUlVkS0dIVUNFK0l2ClBsZkh4UGdEcXNENWlYU3hYYkxkQUNOSHQ3VmpUb2EyQTN6a3RHRWZDNEYvaVVLTXpFY3ZvLy8wd0VGcG5jQ00KcEhXeSt3V29MNnkvb2JxbllZUzhsZUx5K0dvRXFMR05oQzdoZmtXQU5xRlZZZWFZd1ljRXEzWHRxeTFEN2RRMwpVMjI3d3VIRDV2TDROUlh6Z1dNYlVuZ3Z6TlVJCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcDlMM0NVa0M3czVXS2NXTGdvWU5KaTBlT1h1c0JNc1h3WXYzMjFGRU5KdlBtb3NjCkRUWXE4aVFIMU56MGJqNVB0ZHd3WVYrNWpmdXJJSUdQSTJIUjI3MFg3NXdTNmZwVWMzazRxckZwTnNqWnBZTmkKd0Jkck9tczZWZHJRZG9nVnE1a015VGFSdDhtdCt6NlZ2VUVLb0Q0K3hsMFlxZDNBVjhjWDdGZ2FsWmpLbWkrYgowMGdTN3ZYUnNNcldjcGg5cmtlbmllQUtnZ3RtUStaeFlncmtrVzRkaGVPaGpwNmllSjMxVWJxeERGbTRNNk9yCnIvbXl1dkxuMytZODFHSUFoQTd2TDcwSDFtMm1aU2NXcVJXUGhjSjlsTGZTZXB4dVJKcmRvQkpFUENac2RwRWQKNmYxMzRMY1FtaFd0Y2lkZzM0QWJHV0FNMUNiM0RnZ3NiK3pkL1FJREFRQUJBb0lCQUE3M0RQaFMvbVAxR2xIWApQNzEvM3FSTTJha2VraFJMVis3MllEKzZXMjZsaGptdHRlNm5xZVMxdWMwTmR1NXR1QVhyZ0pUdVNFbVU2NG1XCmhBRVBzL3I0UGE0c0tMT2Nrdk5KRi9pQW9YVTFLOU5LaC8vQkZ0cTZ2UlR5MGl2L3JvOENzdFV1ZklmNi8veXIKZEFiUVNmWklGcWp4bkVWcGRNRmZDNDhUdkNzaXM4YnNHZkpBMlBlTGV6T3Fud1NpSFJ0TVgyMUIvUTc4d1h5dApMazNQNGxqU21sMHlGanRzblRUV2FiSk1VbkJYUDVxMXp0MTFvUDVPM1EyMmNQZEVpbG1ROEw1a21ROXNkeW5rCkRjczdOM2FPNHhLU3JpY0ZrcnY1ZXJBd2hpZHgwMmhiMnhvbUdaNktVVHRYSk9XSHYwT1lpTFMwVGxSVWphMG4KU0c4eGNJRUNnWUVBdzVFSXNIRzRqaVgydUtkMjNpMzZsUmNDbG9yVUhvS01Kbkp3UXZHNStNa1dMS1BqTkpCVQpvQWlXZWNQWEZWcUR1RmE5QWtsa1krdHFQc0FwbWw5UTJZbHArUThZbUdYcmo5eml4cm9GWmtKVVovODhnRVY4CnZHMXVUOE9nSS9xejNlZTRrVXJBQndwK3AzR3VnMEg3eDZJRHF0RHFHaDlwZS9RdnZRN284OGtDZ1lFQTI2OUUKcTFKZWZaVjJJUFZ5c1B3elRBNHVWK1BUT1RwM3NhWnFUNW1TbjFySnNpbDVBUDEycWVMOTZOeW1tVFpueVhWSQpYZWx6Nkh2SXBSR1E0d29kaGE2aEFWNzJkcDltbzlWbUpOeEZJclBSNDhHOGVOdHNBOGJlZHFpZFRhTy9oNkR0CkV1NEpsY2ZhMmhxTFFBKzUyQ3gvbEZNYTMrM3BYN0VGT1BPWUtwVUNnWUJaV0loa3UvKzZDWVFYUm9MYTdKeWYKd254dk5JdkdTSlFvK0gxclNDNVRoK0wya0FVOFBYZzhDTkJlWHVlRG5PK3lwd1lBNW5EVDZYaUhwSmtkS3RDdwpJY1JsZ2MwVnl2Sjhya2g0ekFHdGZ6NDZxUFFHRWpqemlQY3R2ODBJd3YrcnNMSzB4amJHd0xldVhoU0JhUUxUCmFLUk9STlcvQzN6UW9YV3g1UDd1YVFLQmdRRFBzQVZWaW91MllvVEphQUxEKzhwclRzVFZacGVjZFFBUHZXcW8KVW1IaHNhMFplRWZqZmJ5Zm8rKzBKRmFFWm9EOFhwckozaGtzWTBvdmRFbnJ1dlpxR2N3eFJadndUWVoxd1J2TwpJVWhqSkdsN3p2N2xxMXVVdm9BMjRmWEZIdGZGMjRnRjYzQzRYN2N4bHdLcXo3TTlBZVNqVDJZSzZodEYwazlECnBsZm5lUUtCZ0VkNi9NeHUwWlpyTnRKYVc5ZHQzVENHN2lieXpmeXNMd3htMDhRYzIrTlQ5Zi9uQmhTTW1kc3MKRGo2YitqY2lGSDdoUlB4ZFgwQWQ5Q200RFZzQ0hNR1VpRWplbWxrbUk1bmErSCtwRlhFV3ZoM0U5ZzZSdVJ2cApnL1RWWkN4RTJId2RjdkVBVVUyT3ExSVZLT2ZMek03YkVJSGFvYmF1WW9pc3F5SmtEeFJsCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUs0SXRjeFQzNVFBSnQ5KzEvV2U2MFl3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFeQpNVFl4TXpVd01ESmFGdzB5TXpFeU1UWXhNelV3TURKYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDbjB2Y0pTUUx1emxZcHhZdUNoZzBtTFI0NWU2d0V5eGZCaS9mYlVVUTBtOCthaXh3Tk5pcnlKQWZVM1BSdQpQaysxM0RCaFg3bU4rNnNnZ1k4allkSGJ2UmZ2bkJMcCtsUnplVGlxc1drMnlObWxnMkxBRjJzNmF6cFYydEIyCmlCV3JtUXpKTnBHM3lhMzdQcFc5UVFxZ1BqN0dYUmlwM2NCWHh4ZnNXQnFWbU1xYUw1dlRTQkx1OWRHd3l0WnkKbUgydVI2ZUo0QXFDQzJaRDVuRmlDdVNSYmgyRjQ2R09ucUo0bmZWUnVyRU1XYmd6bzZ1ditiSzY4dWZmNWp6VQpZZ0NFRHU4dnZRZldiYVpsSnhhcEZZK0Z3bjJVdDlKNm5HNUVtdDJnRWtROEpteDJrUjNwL1hmZ3R4Q2FGYTF5CkoyRGZnQnNaWUF6VUp2Y09DQ3h2N04zOUFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUIzV0dBSkR2elZxY01qbzBYNUlFcHdVWW41L1laeENJMDRoOWVwNzFpUUhSZGhWZVJQTGVQMURnN2YKL3JOYzZ3Z1JyZnR4Tm4yajQ5TEtBYzZVVjRERXNyaVA1dDFRVGttN0o5NEl6NlB2V1NWZEZUOS9aWDNaR3hQQwpqOG5WTFB0Rm4wU3dwUTdNOXhsbStIVlZLWUpMb1U2RjZxOXF4dmdUeGk0V04zem5nRWhlUlVkS0dIVUNFK0l2ClBsZkh4UGdEcXNENWlYU3hYYkxkQUNOSHQ3VmpUb2EyQTN6a3RHRWZDNEYvaVVLTXpFY3ZvLy8wd0VGcG5jQ00KcEhXeSt3V29MNnkvb2JxbllZUzhsZUx5K0dvRXFMR05oQzdoZmtXQU5xRlZZZWFZd1ljRXEzWHRxeTFEN2RRMwpVMjI3d3VIRDV2TDROUlh6Z1dNYlVuZ3Z6TlVJCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 8b06124011c14308c7e39313ef7413e3e536db396f0c9cc08fc89d4b6c4facf4
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
