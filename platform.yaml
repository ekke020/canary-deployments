---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: linkerd
  namespace: flux-system
spec:
  interval: 1m0s
  path: ./gitops/flux/runtime/source/linkerd
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client
  healthChecks:
    - apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      name: linkerd
      namespace: linkerd
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: linkerd-viz
  namespace: flux-system
spec:
  dependsOn:
  - name: linkerd
  interval: 1m0s
  path: ./gitops/flux/runtime/source/linkerd-viz
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client
  healthChecks:
    - apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      name: linkerd-viz
      namespace: linkerd-viz
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: ambassador
  namespace: flux-system
spec:
  dependsOn:
  - name: linkerd-viz
  interval: 3m0s
  path: ./gitops/flux/runtime/source/ambassador
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client
  healthChecks:
    - apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      name: ambassador-edge-stack
      namespace: edge-stack
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: flagger
  namespace: flux-system
spec:
  dependsOn:
  - name: linkerd-viz
  interval: 1m0s
  path: ./gitops/flux/runtime/source/flagger
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client
  healthChecks:
    - apiVersion: apps/v1
      kind: Deployment
      name: flagger
      namespace: linkerd-viz
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: linkerd-multicluster
  namespace: flux-system
spec:
  dependsOn:
  - name: linkerd-viz
  interval: 1m0s
  path: ./gitops/flux/runtime/source/linkerd-multicluster
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client
  healthChecks:
    - apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      name: linkerd-multicluster
      namespace: linkerd-multicluster
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: cert-manager
  namespace: flux-system
spec:
  interval: 1m0s
  path: ./gitops/flux/runtime/source/cert-manager
  dependsOn:
    - name: linkerd-viz
    - name: nginx-ingress
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client
  healthChecks:
    - apiVersion: helm.toolkit.fluxcd.io/v2beta1
      kind: HelmRelease
      name: cert-manager
      namespace: cert-manager
---
apiVersion: kustomize.toolkit.fluxcd.io/v1beta1
kind: Kustomization
metadata:
  name: finalizers
  namespace: flux-system
spec:
  interval: 1m0s
  path: ./gitops/flux/runtime/source/finalizers
  dependsOn:
    - name: flagger
    - name: linkerd-viz
    - name: ambassador
    - name: cert-manager
  prune: true
  sourceRef:
    kind: GitRepository
    name: gitops
  validation: client---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUsxdjByd3k2cmlRcDlxT1hiblkxOVl3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFeU1UWXhNekkyTkRsYQpGdzB5TXpFeU1UWXhNekkyTkRsYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURySGJMVE1uTFp5L2tQYzRVMmE1dlkKYXJLOSs4K2NrVHhHWnN3YTMvU01oNE1ZQ1JkWnpTQkZpMWI2RW5jQUNSaW1SVkV5bDA0Q0JXVGx3NjFhVmllNApNeFR3MUI3cTVMdmdNSk0zTTlhaUU2elJYRXRjS1JLcG5rejZCK1Q2UXNuZ2lERUN6WmlqaXVlMnhxbjdaemRmCmN3bXhjWkhmdFhjbnEyaHBoMU52a1VWcEJyK0psa1REYzVmVVFCbm1QVHQxUG5NK29yRlN5TGhtL09UUVRJd0EKUHJYMldsU2lPeGpKT0dERlNnTGZRMUtULzNicFpocW5RSkoyS3d0ZncvclV1UlpHb3BvdDZxVmUzMjY1aFVDRQplSTBYbjd4NURuV1FIZTFXeHpaM05wY0FnYWczNTRKdEdieVlQNGNlTGZOQUdscXArMEJ2R2FlbWpWbUhtck52CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTJXREw3YWtZYVZyY1FXa0ExTWp3U2p5UzFPbWUvCmU2L053UDNHUHNkOUoraUFuR202dXNVdUxEeWYycmZkSGk5bTdBY3Zsa0ZybVBsaGRIWEFjS08zMnVnRUw1MTMKdTU2L0xrUVNvaHlQQzRaUUhTNDE3R09wUStCZFRvM3NXdHljMDFLTXgrcHkveFpjZFIyMGM3Q1ZtQ0VKZTlkNApEbHJkV25raE8vNHBsSGR6aFJIZTB1ekxVWUlaNFIxMnYrc1BLWGZYcmRWS0dqWC9PdjZyM3pVb1RJVVZmRUVtCkFXbHFjSEFuMWE1TjY5WXJOMWVQcEpNNkUxTkNxeElxSlhMYVg5ODZWYWtWb09xZVA0YStDby9YZjNYY2wycjkKNTdlY2liMkpPSTIzZzg4a29wL0ZiQlNrTGpScCs4anVFd21wZ0x6OUhxYnN5T3E0ZU16RmxvS1IKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBNngyeTB6SnkyY3Y1RDNPRk5tdWIyR3F5dmZ2UG5KRThSbWJNR3QvMGpJZURHQWtYCldjMGdSWXRXK2hKM0FBa1lwa1ZSTXBkT0FnVms1Y090V2xZbnVETVU4TlFlNnVTNzREQ1ROelBXb2hPczBWeEwKWENrU3FaNU0rZ2ZrK2tMSjRJZ3hBczJZbzRybnRzYXArMmMzWDNNSnNYR1IzN1YzSjZ0b2FZZFRiNUZGYVFhLwppWlpFdzNPWDFFQVo1ajA3ZFQ1elBxS3hVc2k0WnZ6azBFeU1BRDYxOWxwVW9qc1l5VGhneFVvQzMwTlNrLzkyCjZXWWFwMENTZGlzTFg4UDYxTGtXUnFLYUxlcWxYdDl1dVlWQWhIaU5GNSs4ZVE1MWtCM3RWc2MyZHphWEFJR28KTitlQ2JSbThtRCtISGkzelFCcGFxZnRBYnhtbnBvMVpoNXF6YndJREFRQUJBb0lCQVFEWG0yVjQzWU9MRE16NgpDV0s0MUJlWGI4azRCYXFPbG5VaXpuUVBsUjZLbkY1d2RTM1BzUmNPRDBpVWpNaEo1UTJRdEhKUXBZWG92bytYClVFa3hWVjZaUVdiTHJvb250OWcrTCsxZ3F3NEJsVzlla25lZExTRXJJTHJRY3RyZFVOQVdNbTVYZHJpcUNPQ1MKc1Q0Q0NOWXpscWZsN0JMc2hsbWRyRWRVdHIraHgyRWp6VGpHcDcyRC9QL3dSYWl2Yk1WR2NXRDh6am1qMG9ndgowZmdhditLUGxEKzc0Wmc2THNabDZ6VjB6TDZsWnJrMGU2VTY2cVFObU8zZStIQjRvQi9pY2N1SHRSTjB3Rms4CmRqMS82ZFlPemhDekdxdTNZSGltQ0Q4Ry9GNlJtRzRxM3VwRVNaYVQ5WUIzNGxIL01xSEQ5WHR5d2ZaTVM4SkQKQ2RPMnZZWkJBb0dCQVAwV2VPOGdsS2RtdVRNMmRjQmViZmY1bEx5N1ZTY1pRSVhuY3pRUFdDWXl0bGtoYWJodAo3WXdycVI3VUw2cXVmNm9XdFkrUlBhcXhCNDQvdWFXY29IZW5idU9MdVZ2eWNPczdqMzlxc2xnb1hXdDVoMEFxCkN2eDZ0cjFSeC9zTm4xQ2tNdUV2YXhGM1pnMVg0R3Axd2xJcDFVNjJFN0NoclFCU3BaTWxYc0FQQW9HQkFPM1MKU1VQNm5IK3BNZWJaY2JHdDJic1dxZ1NPcFRrQ29QbThyUCs0V0pNVG1zSTRHbFUyME93dGNHZEhDazRZTW9lYQpwNysrajJvTFRjSkhOU09IWS9lU3lBWVMvbHVBUStYcVFKckIrQTViZDIxUW0yT29iVVQrbm1ScGZqSmVrU1Z2CndjTDF4MFJCdllmeU5VUUpPZjhBUUNhUHl2TVNmRmJwTVVud3MzYWhBb0dBY2R3bVZBNW9VbGVZZ2ozQ0ErVjMKdTlRQTRsZTFHMzMwMVVrblB3aVlNN2NrNmp4cC81c1UvN2Ewd3pYYXJBTU5WRXdiS3BmQkVvWEtUR2pHOEliaQplbkpOSlBtN1RtNW45cXc1QnEzTnhuT0NjOU9jMFhVWXREWFErS05PUU5nRUVKZU9mRmlFNXJxOG9zd2lIa01VClJUcWt5R0NKd3pFNVQ2ZmU3YkFtVEdrQ2dZQVRMcERtUU1KNnNZVHEzOE1CMThubUF5LzNhaUg5ZFM3U3Rkc20KVFJJbjJyN3l4MStvVytHQ0N6QXp4RkVhZDIwcjd0ZDA2Y1BiZzhuano2YURsUm9GRC91K01hMytaMXdTb1ZCUQpxekI4eC9mY0ExSmxPV0tHM0JxZWNydlJDRHVnejJETGZ0Tnh0L08za1Z1bWZ6QUVWMXJWUVdmWEx6aUVNZzdkCnJlSnJ3UUtCZ0JJNG94bUhBTUN2Vmpmd0ptNDh3UHBEeGVQZE96NEtGUDUwcXljYTNFcjJXNFdOZ0RIVzFWUHMKekZvanV3Y3dCNGZxbVhpcGw5SU1URFp4R3FGbVErR2tNdjBpQnpZUFVuY0pVN0JuUUFycWlIWnYvMDN4ZkM2ZApDVTVjODI2WXVDalkrQVUrR2NQYncydEkydWxOcWNuaklMTCtYS3BuY2VWMXBaWjVOVDZDCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKakNDQWc2Z0F3SUJBZ0lSQUsxdjByd3k2cmlRcDlxT1hiblkxOVl3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGRHRndMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFeU1UWXhNekkyTkRsYQpGdzB5TXpFeU1UWXhNekkyTkRsYU1CNHhIREFhQmdOVkJBTVRFM1JoY0M1c2FXNXJaWEprTFhacGVpNXpkbU13CmdnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURySGJMVE1uTFp5L2tQYzRVMmE1dlkKYXJLOSs4K2NrVHhHWnN3YTMvU01oNE1ZQ1JkWnpTQkZpMWI2RW5jQUNSaW1SVkV5bDA0Q0JXVGx3NjFhVmllNApNeFR3MUI3cTVMdmdNSk0zTTlhaUU2elJYRXRjS1JLcG5rejZCK1Q2UXNuZ2lERUN6WmlqaXVlMnhxbjdaemRmCmN3bXhjWkhmdFhjbnEyaHBoMU52a1VWcEJyK0psa1REYzVmVVFCbm1QVHQxUG5NK29yRlN5TGhtL09UUVRJd0EKUHJYMldsU2lPeGpKT0dERlNnTGZRMUtULzNicFpocW5RSkoyS3d0ZncvclV1UlpHb3BvdDZxVmUzMjY1aFVDRQplSTBYbjd4NURuV1FIZTFXeHpaM05wY0FnYWczNTRKdEdieVlQNGNlTGZOQUdscXArMEJ2R2FlbWpWbUhtck52CkFnTUJBQUdqWHpCZE1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUkKS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWVCZ05WSFJFRUZ6QVZnaE4wWVhBdWJHbHVhMlZ5WkMxMgphWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQTJXREw3YWtZYVZyY1FXa0ExTWp3U2p5UzFPbWUvCmU2L053UDNHUHNkOUoraUFuR202dXNVdUxEeWYycmZkSGk5bTdBY3Zsa0ZybVBsaGRIWEFjS08zMnVnRUw1MTMKdTU2L0xrUVNvaHlQQzRaUUhTNDE3R09wUStCZFRvM3NXdHljMDFLTXgrcHkveFpjZFIyMGM3Q1ZtQ0VKZTlkNApEbHJkV25raE8vNHBsSGR6aFJIZTB1ekxVWUlaNFIxMnYrc1BLWGZYcmRWS0dqWC9PdjZyM3pVb1RJVVZmRUVtCkFXbHFjSEFuMWE1TjY5WXJOMWVQcEpNNkUxTkNxeElxSlhMYVg5ODZWYWtWb09xZVA0YStDby9YZjNYY2wycjkKNTdlY2liMkpPSTIzZzg4a29wL0ZiQlNrTGpScCs4anVFd21wZ0x6OUhxYnN5T3E0ZU16RmxvS1IKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
  port: linkerd-admin
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: proxy-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: proxy-admin
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kubelet
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      securityContext:
        fsGroup: 65534
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.30.3
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: 210b17bf8709e32cb9543e456b90b3555d6f0e88d03b8a03faffffa389eb1d70
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUlvT0JYZytQWTRoQ24xbEZ6QzJYM3d3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFeQpNVFl4TXpJMk5EbGFGdzB5TXpFeU1UWXhNekkyTkRsYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEaElESzExcGZkUkw3VUJGLzlLOGhXS0xSZ1dvRWw1clQ4Wk5wOVh6ZWowNy9NS25Kd2VJRE5iN0pndGJNRQo1UkFtNWFiTm5QS1UzNGE4VExEMzVhdTJIQmYvVjlhaVFleldHUmk4UHpZY3JVeGVYVGFlUm82ZEtqc0wvYzFlClBtNDJwdHlQRTRKSDBJMUtMZkcrRHp5UTI3NTlacnRTOStKUjBRaHlzekRNTXhnUEVxNkY1R1dJejJ5REFFUmsKNkdwY2lBeEtnQW1wc29TN25xbCszRFJReHJHNVAvenIwNmkxdEU5UjdCQUJFWWFsYjFsRWUrZXJ4OTRLOFRjcAowaGlsWnNPZ2xJbFQzTzVuc3VpalFZSDJPRnArVzZQdWI0MXN2QmovYm9Lc0N0cXZZdW9pbXVyQk1hZC9TOFc1CnAreGFwVkMwSGxyeDhFUHFEKzdsLysrckFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURYMG1VN0lhMzEyakFhWkNJZ3NpUFhyU3JGb3JVcUl5K1kxUHJoc0VxU1VWT3VsK2pYWG9hU2Exbk0KS0JRZVFwVlk0MForVExtcmlHN0EvTWRaTUJWVkJrU2VJRTU4bzc4c281RGQwbVlvWUsrNW55TDgvVkc2Um5xWApLMU10eVVmRk9GeG1vNjR4T0ppWVFkYzZLVWVUMHV0UzZTQ05qMExCOXFZY0F3VndDUjhiei8wQW81cUpkbStpCmtGZHl0bEZNMWg2UlNrRDlFVEFrM3dyUzk0T3Q5YVZERjRZNGwzeWZSV0EwaVZ3SEpydHpZNjArRjdQV2ZtekYKaUxVemRwZ0tCZnB3K21NUFVXRHlPM0Y2MXVuSnpwdVRQZ0w2dmR6WmlycWlYUjk3bTE3Q0NFTng5NTFUYTdmVwpiK3JHVWF5bWZnRDlDaTk2SzU0cDMyb0k4MEw1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBNFNBeXRkYVgzVVMrMUFSZi9TdklWaWkwWUZxQkplYTAvR1RhZlY4M285Ty96Q3B5CmNIaUF6Vyt5WUxXekJPVVFKdVdtelp6eWxOK0d2RXl3OStXcnRod1gvMWZXb2tIczFoa1l2RDgySEsxTVhsMDIKbmthT25TbzdDLzNOWGo1dU5xYmNqeE9DUjlDTlNpM3h2Zzg4a051K2ZXYTdVdmZpVWRFSWNyTXd6RE1ZRHhLdQpoZVJsaU05c2d3QkVaT2hxWElnTVNvQUpxYktFdTU2cGZ0dzBVTWF4dVQvODY5T290YlJQVWV3UUFSR0dwVzlaClJIdm5xOGZlQ3ZFM0tkSVlwV2JEb0pTSlU5enVaN0xvbzBHQjlqaGFmbHVqN20rTmJMd1kvMjZDckFyYXIyTHEKSXBycXdUR25mMHZGdWFmc1dxVlF0QjVhOGZCRDZnL3U1Zi92cXdJREFRQUJBb0lCQVFEVFp3NzNucXBCU0ZzQwpjWkZLQnFFNzkwRmE4ZUl4R3pKOWlKOTc5N3dpQmFnb0t2d0lEY0MyS2R1UjRVNVluRm5NalA5VU9idTZmU1RqCkVnbGs0TEdjYzBrOXFOaU95ZVdETDFJQkJFTG1MdjUxNW9aeG5zUXhaZ1RJdis3b1B5dnora0ZId2dRbk4vcFYKM0VzVU5PNmxBUlVpWVNRclIwZXBtT2ViL2hVbXlsamRxSTJLUERKU1JuNTJRcXIxcUU3ZWZ4eU1IYU5YSzRvOQp4S3NyZTBPZXVyUm8zK0NsV0FxdGcvZXZnRXNEaUd5RkxZVGNNTFFrOXFteUV0N2RrZUdCY0FVSUtVcmlPSi9CCkhWSk5tNTU5LzVKZEZ4MFZ0ZnE4YVNvWkRrSGsrN2poazFUNTNHYXo4Vm52WUlqSU53TXZHbElubEh0L1JUcXUKaXVrd2kxZXhBb0dCQU9aZG9rYmhwTFZnc0cvbGVNdlpNd2JWcnpiR09TSzN4RGVFck8vbUJhM2I2OUZXR0J3SQplYmVUR3FEYnBnM3M3ZFFRQkpCZDAwU0Qyc2ttOEhOU0VoS216RTRqNmk0dGVKM1c4aitZS1p4TGhMYWk0c2l5CktpbEIzU1VWSWl5Q0RMb0Y0YW5yWDdLWFpSL09wamN5SlFDZVVPU05MdG1YTEFKT1RDMHlnbVB0QW9HQkFQb3QKUzFIYm1ZTDg4cGxjUGI4Y1RnekFNNjNMVVF1L1MycUpGbUI4YXF5M3pRTHVoZkRqeC9XTi9vejZaM20wcnYvYgpacG1Tak5sR25RdUpVMyt0MlpGMUlBOW4yMk1RV09BZXIvMk1sa2RRaXZURERGUFhFV2FXT2ZkYnpNazU1clZ0CktabzJIRndrenBnQ2lLZHhkUXZmbld2SlZIbVBhTmR4cVVqNGN0NzNBb0dBZklLVFdUaFFhL0JNck00Y2tpRmQKSVE2UjIwc2NTcFdFcW5VOWU1U1o4VFJ5cXZ5Ym4xczlYbWxWOVNlREF2ZlNPOUpFaFRzUkczRWc2YVB3Um9SUApYR0ZtLzcwTnI5UEg0NWZ2NjB0MUFoTVhNaGVyOThuRVcvUkxjT1dSU1BrcG84bldCSjlCWkNmTDhuc2cvNmhNCnM1N2VIZ25wRHBaVXBSSm92ZTBVNktrQ2dZRUE5NjhvUnQ3WFdTdjlNNEJ6VVdaQWo3Y3Fjd0k4TnhrcEhVeWoKN3RxKzhrajJtOVJ5bjAra2hLUVVSSmNWSXhXVHZKUUhQRHd2WGwzZTFiRWNEZWljNHJuSEIvbVc1cmtraEo5ZApOZldlUXZTbTNqVE5XNlF1QWhieFJNaUtNeDgwSHFMNDhVaHBRNERkV1BvSk9WM0d0LzZuNkRMbmc0Sk1GaURkCnJQVHRKWGtDZ1lFQWlTeTFiVlhyRWFaL3pZdDNVakNRckF4NnM0dlhkeDZPc3Q1TzBabUJoRkxOcjA1bzVIZGkKSFQzdnpMZ0NuSVNSRGQ1OEV1ZTVzTFJvV3gwdUN6bjY0V1BZdkR5TGhEbW1mbHhtUXBxUUZZOHVMK0dpRFloQwowVjc1b0V2UFdhSVhQOTlzY3FWOXZPaUJEVmNlWUZNTnJMK2ZnZWszdVhSb2J2UTV5ck5pcStVPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUlvT0JYZytQWTRoQ24xbEZ6QzJYM3d3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TWpFeQpNVFl4TXpJMk5EbGFGdzB5TXpFeU1UWXhNekkyTkRsYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFEaElESzExcGZkUkw3VUJGLzlLOGhXS0xSZ1dvRWw1clQ4Wk5wOVh6ZWowNy9NS25Kd2VJRE5iN0pndGJNRQo1UkFtNWFiTm5QS1UzNGE4VExEMzVhdTJIQmYvVjlhaVFleldHUmk4UHpZY3JVeGVYVGFlUm82ZEtqc0wvYzFlClBtNDJwdHlQRTRKSDBJMUtMZkcrRHp5UTI3NTlacnRTOStKUjBRaHlzekRNTXhnUEVxNkY1R1dJejJ5REFFUmsKNkdwY2lBeEtnQW1wc29TN25xbCszRFJReHJHNVAvenIwNmkxdEU5UjdCQUJFWWFsYjFsRWUrZXJ4OTRLOFRjcAowaGlsWnNPZ2xJbFQzTzVuc3VpalFZSDJPRnArVzZQdWI0MXN2QmovYm9Lc0N0cXZZdW9pbXVyQk1hZC9TOFc1CnAreGFwVkMwSGxyeDhFUHFEKzdsLysrckFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUURYMG1VN0lhMzEyakFhWkNJZ3NpUFhyU3JGb3JVcUl5K1kxUHJoc0VxU1VWT3VsK2pYWG9hU2Exbk0KS0JRZVFwVlk0MForVExtcmlHN0EvTWRaTUJWVkJrU2VJRTU4bzc4c281RGQwbVlvWUsrNW55TDgvVkc2Um5xWApLMU10eVVmRk9GeG1vNjR4T0ppWVFkYzZLVWVUMHV0UzZTQ05qMExCOXFZY0F3VndDUjhiei8wQW81cUpkbStpCmtGZHl0bEZNMWg2UlNrRDlFVEFrM3dyUzk0T3Q5YVZERjRZNGwzeWZSV0EwaVZ3SEpydHpZNjArRjdQV2ZtekYKaUxVemRwZ0tCZnB3K21NUFVXRHlPM0Y2MXVuSnpwdVRQZ0w2dmR6WmlycWlYUjk3bTE3Q0NFTng5NTFUYTdmVwpiK3JHVWF5bWZnRDlDaTk2SzU0cDMyb0k4MEw1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 7bb2744854857960ff469750f60d7830cafffcf9445e694689946824c0fa8cce
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.12.2
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.12.2
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.12.2
        linkerd.io/inject: enabled
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.12.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          runAsUser: 2103
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
